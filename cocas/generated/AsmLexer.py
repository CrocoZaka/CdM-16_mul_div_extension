# Generated from AsmLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,299,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,
        1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,5,31,214,8,31,10,31,12,31,
        217,9,31,1,32,4,32,220,8,32,11,32,12,32,221,1,33,1,33,1,33,1,33,
        4,33,228,8,33,11,33,12,33,229,1,34,1,34,1,34,1,34,4,34,236,8,34,
        11,34,12,34,237,1,35,1,35,5,35,242,8,35,10,35,12,35,245,9,35,1,35,
        1,35,1,35,1,35,5,35,251,8,35,10,35,12,35,254,9,35,5,35,256,8,35,
        10,35,12,35,259,9,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,267,8,36,
        1,36,1,36,1,37,3,37,272,8,37,1,37,1,37,1,38,1,38,5,38,278,8,38,10,
        38,12,38,281,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,40,4,40,294,8,40,11,40,12,40,295,1,41,1,41,0,0,42,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,1,0,12,1,0,48,51,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,57,65,
        70,97,102,3,0,10,10,34,34,92,92,3,0,10,10,39,39,92,92,1,0,10,10,
        2,0,9,9,32,32,5,0,43,43,47,57,61,61,65,90,97,122,1,0,0,65534,309,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,91,1,0,0,0,5,97,1,0,0,0,7,106,
        1,0,0,0,9,109,1,0,0,0,11,114,1,0,0,0,13,118,1,0,0,0,15,122,1,0,0,
        0,17,125,1,0,0,0,19,128,1,0,0,0,21,131,1,0,0,0,23,137,1,0,0,0,25,
        143,1,0,0,0,27,149,1,0,0,0,29,154,1,0,0,0,31,161,1,0,0,0,33,167,
        1,0,0,0,35,172,1,0,0,0,37,178,1,0,0,0,39,182,1,0,0,0,41,187,1,0,
        0,0,43,189,1,0,0,0,45,191,1,0,0,0,47,193,1,0,0,0,49,195,1,0,0,0,
        51,197,1,0,0,0,53,199,1,0,0,0,55,201,1,0,0,0,57,203,1,0,0,0,59,205,
        1,0,0,0,61,208,1,0,0,0,63,211,1,0,0,0,65,219,1,0,0,0,67,223,1,0,
        0,0,69,231,1,0,0,0,71,239,1,0,0,0,73,262,1,0,0,0,75,271,1,0,0,0,
        77,275,1,0,0,0,79,284,1,0,0,0,81,288,1,0,0,0,83,297,1,0,0,0,85,86,
        5,97,0,0,86,87,5,115,0,0,87,88,5,101,0,0,88,89,5,99,0,0,89,90,5,
        116,0,0,90,2,1,0,0,0,91,92,5,98,0,0,92,93,5,114,0,0,93,94,5,101,
        0,0,94,95,5,97,0,0,95,96,5,107,0,0,96,4,1,0,0,0,97,98,5,99,0,0,98,
        99,5,111,0,0,99,100,5,110,0,0,100,101,5,116,0,0,101,102,5,105,0,
        0,102,103,5,110,0,0,103,104,5,117,0,0,104,105,5,101,0,0,105,6,1,
        0,0,0,106,107,5,100,0,0,107,108,5,111,0,0,108,8,1,0,0,0,109,110,
        5,101,0,0,110,111,5,108,0,0,111,112,5,115,0,0,112,113,5,101,0,0,
        113,10,1,0,0,0,114,115,5,101,0,0,115,116,5,110,0,0,116,117,5,100,
        0,0,117,12,1,0,0,0,118,119,5,101,0,0,119,120,5,120,0,0,120,121,5,
        116,0,0,121,14,1,0,0,0,122,123,5,102,0,0,123,124,5,105,0,0,124,16,
        1,0,0,0,125,126,5,105,0,0,126,127,5,102,0,0,127,18,1,0,0,0,128,129,
        5,105,0,0,129,130,5,115,0,0,130,20,1,0,0,0,131,132,5,109,0,0,132,
        133,5,97,0,0,133,134,5,99,0,0,134,135,5,114,0,0,135,136,5,111,0,
        0,136,22,1,0,0,0,137,138,5,114,0,0,138,139,5,115,0,0,139,140,5,101,
        0,0,140,141,5,99,0,0,141,142,5,116,0,0,142,24,1,0,0,0,143,144,5,
        115,0,0,144,145,5,116,0,0,145,146,5,97,0,0,146,147,5,121,0,0,147,
        148,5,115,0,0,148,26,1,0,0,0,149,150,5,116,0,0,150,151,5,104,0,0,
        151,152,5,101,0,0,152,153,5,110,0,0,153,28,1,0,0,0,154,155,5,116,
        0,0,155,156,5,112,0,0,156,157,5,108,0,0,157,158,5,97,0,0,158,159,
        5,116,0,0,159,160,5,101,0,0,160,30,1,0,0,0,161,162,5,117,0,0,162,
        163,5,110,0,0,163,164,5,116,0,0,164,165,5,105,0,0,165,166,5,108,
        0,0,166,32,1,0,0,0,167,168,5,119,0,0,168,169,5,101,0,0,169,170,5,
        110,0,0,170,171,5,100,0,0,171,34,1,0,0,0,172,173,5,119,0,0,173,174,
        5,104,0,0,174,175,5,105,0,0,175,176,5,108,0,0,176,177,5,101,0,0,
        177,36,1,0,0,0,178,179,5,108,0,0,179,180,5,111,0,0,180,181,5,119,
        0,0,181,38,1,0,0,0,182,183,5,104,0,0,183,184,5,105,0,0,184,185,5,
        103,0,0,185,186,5,104,0,0,186,40,1,0,0,0,187,188,5,46,0,0,188,42,
        1,0,0,0,189,190,5,44,0,0,190,44,1,0,0,0,191,192,5,43,0,0,192,46,
        1,0,0,0,193,194,5,45,0,0,194,48,1,0,0,0,195,196,5,58,0,0,196,50,
        1,0,0,0,197,198,5,42,0,0,198,52,1,0,0,0,199,200,5,62,0,0,200,54,
        1,0,0,0,201,202,5,40,0,0,202,56,1,0,0,0,203,204,5,41,0,0,204,58,
        1,0,0,0,205,206,5,45,0,0,206,207,5,124,0,0,207,60,1,0,0,0,208,209,
        5,114,0,0,209,210,7,0,0,0,210,62,1,0,0,0,211,215,7,1,0,0,212,214,
        7,2,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,64,1,0,0,0,217,215,1,0,0,0,218,220,7,3,0,0,219,218,1,
        0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,66,1,0,
        0,0,223,224,5,48,0,0,224,225,5,98,0,0,225,227,1,0,0,0,226,228,7,
        4,0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,
        0,0,0,230,68,1,0,0,0,231,232,5,48,0,0,232,233,5,120,0,0,233,235,
        1,0,0,0,234,236,7,5,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,
        1,0,0,0,237,238,1,0,0,0,238,70,1,0,0,0,239,243,5,34,0,0,240,242,
        8,6,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,
        1,0,0,0,244,257,1,0,0,0,245,243,1,0,0,0,246,247,5,92,0,0,247,248,
        9,0,0,0,248,252,1,0,0,0,249,251,8,6,0,0,250,249,1,0,0,0,251,254,
        1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,252,
        1,0,0,0,255,246,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,
        1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,34,0,0,261,72,
        1,0,0,0,262,266,5,39,0,0,263,264,5,92,0,0,264,267,9,0,0,0,265,267,
        8,7,0,0,266,263,1,0,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,269,
        5,39,0,0,269,74,1,0,0,0,270,272,5,13,0,0,271,270,1,0,0,0,271,272,
        1,0,0,0,272,273,1,0,0,0,273,274,5,10,0,0,274,76,1,0,0,0,275,279,
        5,35,0,0,276,278,8,8,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,
        1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,
        6,38,0,0,283,78,1,0,0,0,284,285,7,9,0,0,285,286,1,0,0,0,286,287,
        6,39,0,0,287,80,1,0,0,0,288,289,5,102,0,0,289,290,5,112,0,0,290,
        291,5,45,0,0,291,293,1,0,0,0,292,294,7,10,0,0,293,292,1,0,0,0,294,
        295,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,82,1,0,0,0,297,298,
        7,11,0,0,298,84,1,0,0,0,12,0,215,221,229,237,243,252,257,266,271,
        279,295,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Do = 4
    Else = 5
    End = 6
    Ext = 7
    Fi = 8
    If = 9
    Is = 10
    Macro = 11
    Rsect = 12
    Stays = 13
    Then = 14
    Tplate = 15
    Until = 16
    Wend = 17
    While = 18
    Low = 19
    High = 20
    DOT = 21
    COMMA = 22
    PLUS = 23
    MINUS = 24
    COLON = 25
    ASTERISK = 26
    ANGLE_BRACKET = 27
    OPEN_PAREN = 28
    CLOSE_PAREN = 29
    LINE_MARK_MARKER = 30
    REGISTER = 31
    WORD = 32
    DECIMAL_NUMBER = 33
    BINARY_NUMBER = 34
    HEX_NUMBER = 35
    STRING = 36
    CHAR = 37
    NEWLINE = 38
    COMMENT = 39
    WS = 40
    BASE64 = 41
    UNEXPECTED_TOKEN = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'do'", "'else'", "'end'", 
            "'ext'", "'fi'", "'if'", "'is'", "'macro'", "'rsect'", "'stays'", 
            "'then'", "'tplate'", "'until'", "'wend'", "'while'", "'low'", 
            "'high'", "'.'", "','", "'+'", "'-'", "':'", "'*'", "'>'", "'('", 
            "')'", "'-|'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", "Fi", 
            "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", "Until", 
            "Wend", "While", "Low", "High", "DOT", "COMMA", "PLUS", "MINUS", 
            "COLON", "ASTERISK", "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
            "LINE_MARK_MARKER", "REGISTER", "WORD", "DECIMAL_NUMBER", "BINARY_NUMBER", 
            "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", "COMMENT", "WS", 
            "BASE64", "UNEXPECTED_TOKEN" ]

    ruleNames = [ "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", 
                  "Fi", "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", 
                  "Until", "Wend", "While", "Low", "High", "DOT", "COMMA", 
                  "PLUS", "MINUS", "COLON", "ASTERISK", "ANGLE_BRACKET", 
                  "OPEN_PAREN", "CLOSE_PAREN", "LINE_MARK_MARKER", "REGISTER", 
                  "WORD", "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", 
                  "STRING", "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64", 
                  "UNEXPECTED_TOKEN" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



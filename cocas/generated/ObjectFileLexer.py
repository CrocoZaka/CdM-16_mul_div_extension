# Generated from ./grammar/ObjectFileLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,168,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
        4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,
        12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,
        18,2,19,7,19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,4,10,100,8,10,11,
        10,12,10,101,1,11,1,11,1,11,1,11,1,11,4,11,109,8,11,11,11,12,11,
        110,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,3,15,123,8,
        15,1,15,4,15,126,8,15,11,15,12,15,127,1,16,4,16,131,8,16,11,16,12,
        16,132,1,16,1,16,1,17,3,17,138,8,17,1,17,4,17,141,8,17,11,17,12,
        17,142,1,17,1,17,1,18,4,18,148,8,18,11,18,12,18,149,1,19,4,19,153,
        8,19,11,19,12,19,154,1,20,4,20,158,8,20,11,20,12,20,159,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,0,0,22,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,
        8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,18,39,
        19,41,20,43,21,45,22,3,0,1,2,4,4,0,48,57,65,90,95,95,97,122,5,0,
        43,43,47,57,61,61,65,90,97,122,2,0,9,9,32,32,6,0,9,9,32,32,48,57,
        65,90,95,95,97,122,175,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,1,39,1,
        0,0,0,2,41,1,0,0,0,2,43,1,0,0,0,2,45,1,0,0,0,3,47,1,0,0,0,5,52,1,
        0,0,0,7,57,1,0,0,0,9,63,1,0,0,0,11,67,1,0,0,0,13,72,1,0,0,0,15,77,
        1,0,0,0,17,82,1,0,0,0,19,89,1,0,0,0,21,93,1,0,0,0,23,99,1,0,0,0,
        25,103,1,0,0,0,27,112,1,0,0,0,29,117,1,0,0,0,31,119,1,0,0,0,33,125,
        1,0,0,0,35,130,1,0,0,0,37,140,1,0,0,0,39,147,1,0,0,0,41,152,1,0,
        0,0,43,157,1,0,0,0,45,163,1,0,0,0,47,48,5,84,0,0,48,49,5,65,0,0,
        49,50,5,82,0,0,50,51,5,71,0,0,51,4,1,0,0,0,52,53,5,70,0,0,53,54,
        5,73,0,0,54,55,5,76,0,0,55,56,5,69,0,0,56,6,1,0,0,0,57,58,5,65,0,
        0,58,59,5,66,0,0,59,60,5,83,0,0,60,61,1,0,0,0,61,62,6,2,0,0,62,8,
        1,0,0,0,63,64,5,76,0,0,64,65,5,79,0,0,65,66,5,67,0,0,66,10,1,0,0,
        0,67,68,5,78,0,0,68,69,5,84,0,0,69,70,5,82,0,0,70,71,5,89,0,0,71,
        12,1,0,0,0,72,73,5,78,0,0,73,74,5,65,0,0,74,75,5,77,0,0,75,76,5,
        69,0,0,76,14,1,0,0,0,77,78,5,65,0,0,78,79,5,76,0,0,79,80,5,73,0,
        0,80,81,5,71,0,0,81,16,1,0,0,0,82,83,5,68,0,0,83,84,5,65,0,0,84,
        85,5,84,0,0,85,86,5,65,0,0,86,87,1,0,0,0,87,88,6,7,1,0,88,18,1,0,
        0,0,89,90,5,82,0,0,90,91,5,69,0,0,91,92,5,76,0,0,92,20,1,0,0,0,93,
        94,5,88,0,0,94,95,5,84,0,0,95,96,5,82,0,0,96,97,5,78,0,0,97,22,1,
        0,0,0,98,100,7,0,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,
        0,101,102,1,0,0,0,102,24,1,0,0,0,103,104,5,102,0,0,104,105,5,112,
        0,0,105,106,5,45,0,0,106,108,1,0,0,0,107,109,7,1,0,0,108,107,1,0,
        0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,26,1,0,0,
        0,112,113,5,36,0,0,113,114,5,97,0,0,114,115,5,98,0,0,115,116,5,115,
        0,0,116,28,1,0,0,0,117,118,5,58,0,0,118,30,1,0,0,0,119,120,5,45,
        0,0,120,32,1,0,0,0,121,123,5,13,0,0,122,121,1,0,0,0,122,123,1,0,
        0,0,123,124,1,0,0,0,124,126,5,10,0,0,125,122,1,0,0,0,126,127,1,0,
        0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,34,1,0,0,0,129,131,7,2,0,
        0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,
        0,133,134,1,0,0,0,134,135,6,16,2,0,135,36,1,0,0,0,136,138,5,13,0,
        0,137,136,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,141,5,10,0,
        0,140,137,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,
        0,143,144,1,0,0,0,144,145,6,17,3,0,145,38,1,0,0,0,146,148,7,3,0,
        0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,
        0,150,40,1,0,0,0,151,153,7,0,0,0,152,151,1,0,0,0,153,154,1,0,0,0,
        154,152,1,0,0,0,154,155,1,0,0,0,155,42,1,0,0,0,156,158,7,2,0,0,157,
        156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,
        161,1,0,0,0,161,162,6,20,2,0,162,44,1,0,0,0,163,164,5,58,0,0,164,
        165,1,0,0,0,165,166,6,21,3,0,166,167,6,21,1,0,167,46,1,0,0,0,13,
        0,1,2,101,110,122,127,132,137,142,149,154,159,4,5,2,0,5,1,0,6,0,
        0,4,0,0
    ]

class ObjectFileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IN_BYTES = 1
    IN_ABS = 2

    TARG = 1
    FILE = 2
    ABS = 3
    LOC = 4
    NTRY = 5
    NAME = 6
    ALIG = 7
    DATA = 8
    REL = 9
    XTRN = 10
    WORD = 11
    FP_BASE64 = 12
    ABS_SECTION = 13
    COLON = 14
    MINUS = 15
    NEWLINE = 16
    WS = 17
    NEWLINE_BYTES = 18
    BYTES = 19
    WORD_ABS = 20
    WS_ABS = 21
    COLON_ABS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "IN_BYTES", "IN_ABS" ]

    literalNames = [ "<INVALID>",
            "'TARG'", "'FILE'", "'ABS'", "'LOC'", "'NTRY'", "'NAME'", "'ALIG'", 
            "'DATA'", "'REL'", "'XTRN'", "'$abs'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", "DATA", 
            "REL", "XTRN", "WORD", "FP_BASE64", "ABS_SECTION", "COLON", 
            "MINUS", "NEWLINE", "WS", "NEWLINE_BYTES", "BYTES", "WORD_ABS", 
            "WS_ABS", "COLON_ABS" ]

    ruleNames = [ "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", 
                  "DATA", "REL", "XTRN", "WORD", "FP_BASE64", "ABS_SECTION", 
                  "COLON", "MINUS", "NEWLINE", "WS", "NEWLINE_BYTES", "BYTES", 
                  "WORD_ABS", "WS_ABS", "COLON_ABS" ]

    grammarFileName = "ObjectFileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



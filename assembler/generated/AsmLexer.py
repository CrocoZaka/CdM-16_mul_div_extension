# Generated from /home/ilya/work/cdm8e/ORiGinalASM/assembler/AsmLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,5,28,204,
        8,28,10,28,12,28,207,9,28,1,29,4,29,210,8,29,11,29,12,29,211,1,30,
        1,30,1,30,1,30,4,30,218,8,30,11,30,12,30,219,1,31,1,31,1,31,1,31,
        4,31,226,8,31,11,31,12,31,227,1,32,1,32,5,32,232,8,32,10,32,12,32,
        235,9,32,1,32,1,32,1,32,1,32,5,32,241,8,32,10,32,12,32,244,9,32,
        5,32,246,8,32,10,32,12,32,249,9,32,1,32,1,32,1,33,1,33,1,33,1,33,
        3,33,257,8,33,1,33,1,33,1,34,3,34,262,8,34,1,34,1,34,1,35,1,35,5,
        35,268,8,35,10,35,12,35,271,9,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
        37,1,37,1,37,1,37,1,37,4,37,284,8,37,11,37,12,37,285,0,0,38,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,1,0,11,1,0,48,51,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,57,65,70,97,102,3,0,10,
        10,34,34,92,92,3,0,10,10,39,39,92,92,1,0,10,10,2,0,9,9,32,32,5,0,
        43,43,47,57,61,61,65,90,97,122,297,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,1,77,1,0,0,0,3,83,1,0,0,0,5,89,1,0,0,0,7,98,1,0,0,0,9,101,1,
        0,0,0,11,106,1,0,0,0,13,110,1,0,0,0,15,114,1,0,0,0,17,117,1,0,0,
        0,19,120,1,0,0,0,21,123,1,0,0,0,23,129,1,0,0,0,25,137,1,0,0,0,27,
        143,1,0,0,0,29,148,1,0,0,0,31,154,1,0,0,0,33,159,1,0,0,0,35,166,
        1,0,0,0,37,172,1,0,0,0,39,177,1,0,0,0,41,183,1,0,0,0,43,185,1,0,
        0,0,45,187,1,0,0,0,47,189,1,0,0,0,49,191,1,0,0,0,51,193,1,0,0,0,
        53,195,1,0,0,0,55,198,1,0,0,0,57,201,1,0,0,0,59,209,1,0,0,0,61,213,
        1,0,0,0,63,221,1,0,0,0,65,229,1,0,0,0,67,252,1,0,0,0,69,261,1,0,
        0,0,71,265,1,0,0,0,73,274,1,0,0,0,75,278,1,0,0,0,77,78,5,97,0,0,
        78,79,5,115,0,0,79,80,5,101,0,0,80,81,5,99,0,0,81,82,5,116,0,0,82,
        2,1,0,0,0,83,84,5,98,0,0,84,85,5,114,0,0,85,86,5,101,0,0,86,87,5,
        97,0,0,87,88,5,107,0,0,88,4,1,0,0,0,89,90,5,99,0,0,90,91,5,111,0,
        0,91,92,5,110,0,0,92,93,5,116,0,0,93,94,5,105,0,0,94,95,5,110,0,
        0,95,96,5,117,0,0,96,97,5,101,0,0,97,6,1,0,0,0,98,99,5,100,0,0,99,
        100,5,111,0,0,100,8,1,0,0,0,101,102,5,101,0,0,102,103,5,108,0,0,
        103,104,5,115,0,0,104,105,5,101,0,0,105,10,1,0,0,0,106,107,5,101,
        0,0,107,108,5,110,0,0,108,109,5,100,0,0,109,12,1,0,0,0,110,111,5,
        101,0,0,111,112,5,120,0,0,112,113,5,116,0,0,113,14,1,0,0,0,114,115,
        5,102,0,0,115,116,5,105,0,0,116,16,1,0,0,0,117,118,5,105,0,0,118,
        119,5,102,0,0,119,18,1,0,0,0,120,121,5,105,0,0,121,122,5,115,0,0,
        122,20,1,0,0,0,123,124,5,109,0,0,124,125,5,97,0,0,125,126,5,99,0,
        0,126,127,5,114,0,0,127,128,5,111,0,0,128,22,1,0,0,0,129,130,5,114,
        0,0,130,131,5,101,0,0,131,132,5,115,0,0,132,133,5,116,0,0,133,134,
        5,111,0,0,134,135,5,114,0,0,135,136,5,101,0,0,136,24,1,0,0,0,137,
        138,5,114,0,0,138,139,5,115,0,0,139,140,5,101,0,0,140,141,5,99,0,
        0,141,142,5,116,0,0,142,26,1,0,0,0,143,144,5,115,0,0,144,145,5,97,
        0,0,145,146,5,118,0,0,146,147,5,101,0,0,147,28,1,0,0,0,148,149,5,
        115,0,0,149,150,5,116,0,0,150,151,5,97,0,0,151,152,5,121,0,0,152,
        153,5,115,0,0,153,30,1,0,0,0,154,155,5,116,0,0,155,156,5,104,0,0,
        156,157,5,101,0,0,157,158,5,110,0,0,158,32,1,0,0,0,159,160,5,116,
        0,0,160,161,5,112,0,0,161,162,5,108,0,0,162,163,5,97,0,0,163,164,
        5,116,0,0,164,165,5,101,0,0,165,34,1,0,0,0,166,167,5,117,0,0,167,
        168,5,110,0,0,168,169,5,116,0,0,169,170,5,105,0,0,170,171,5,108,
        0,0,171,36,1,0,0,0,172,173,5,119,0,0,173,174,5,101,0,0,174,175,5,
        110,0,0,175,176,5,100,0,0,176,38,1,0,0,0,177,178,5,119,0,0,178,179,
        5,104,0,0,179,180,5,105,0,0,180,181,5,108,0,0,181,182,5,101,0,0,
        182,40,1,0,0,0,183,184,5,46,0,0,184,42,1,0,0,0,185,186,5,44,0,0,
        186,44,1,0,0,0,187,188,5,45,0,0,188,46,1,0,0,0,189,190,5,58,0,0,
        190,48,1,0,0,0,191,192,5,42,0,0,192,50,1,0,0,0,193,194,5,62,0,0,
        194,52,1,0,0,0,195,196,5,45,0,0,196,197,5,124,0,0,197,54,1,0,0,0,
        198,199,5,114,0,0,199,200,7,0,0,0,200,56,1,0,0,0,201,205,7,1,0,0,
        202,204,7,2,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,
        205,206,1,0,0,0,206,58,1,0,0,0,207,205,1,0,0,0,208,210,7,3,0,0,209,
        208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,
        60,1,0,0,0,213,214,5,48,0,0,214,215,5,98,0,0,215,217,1,0,0,0,216,
        218,7,4,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,1,0,0,0,219,
        220,1,0,0,0,220,62,1,0,0,0,221,222,5,48,0,0,222,223,5,120,0,0,223,
        225,1,0,0,0,224,226,7,5,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,
        225,1,0,0,0,227,228,1,0,0,0,228,64,1,0,0,0,229,233,5,34,0,0,230,
        232,8,6,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,
        234,1,0,0,0,234,247,1,0,0,0,235,233,1,0,0,0,236,237,5,92,0,0,237,
        238,9,0,0,0,238,242,1,0,0,0,239,241,8,6,0,0,240,239,1,0,0,0,241,
        244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,246,1,0,0,0,244,
        242,1,0,0,0,245,236,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,
        248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,251,5,34,0,0,251,
        66,1,0,0,0,252,256,5,39,0,0,253,254,5,92,0,0,254,257,9,0,0,0,255,
        257,8,7,0,0,256,253,1,0,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,
        259,5,39,0,0,259,68,1,0,0,0,260,262,5,13,0,0,261,260,1,0,0,0,261,
        262,1,0,0,0,262,263,1,0,0,0,263,264,5,10,0,0,264,70,1,0,0,0,265,
        269,5,35,0,0,266,268,8,8,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,
        267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,
        273,6,35,0,0,273,72,1,0,0,0,274,275,7,9,0,0,275,276,1,0,0,0,276,
        277,6,36,0,0,277,74,1,0,0,0,278,279,5,102,0,0,279,280,5,112,0,0,
        280,281,5,45,0,0,281,283,1,0,0,0,282,284,7,10,0,0,283,282,1,0,0,
        0,284,285,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,76,1,0,0,0,
        12,0,205,211,219,227,233,242,247,256,261,269,285,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Do = 4
    Else = 5
    End = 6
    Ext = 7
    Fi = 8
    If = 9
    Is = 10
    Macro = 11
    Restore = 12
    Rsect = 13
    Save = 14
    Stays = 15
    Then = 16
    Tplate = 17
    Until = 18
    Wend = 19
    While = 20
    DOT = 21
    COMMA = 22
    MINUS = 23
    COLON = 24
    ASTERISK = 25
    ANGLE_BRACKET = 26
    LINE_MARK_MARKER = 27
    REGISTER = 28
    WORD = 29
    DECIMAL_NUMBER = 30
    BINARY_NUMBER = 31
    HEX_NUMBER = 32
    STRING = 33
    CHAR = 34
    NEWLINE = 35
    COMMENT = 36
    WS = 37
    BASE64 = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'do'", "'else'", "'end'", 
            "'ext'", "'fi'", "'if'", "'is'", "'macro'", "'restore'", "'rsect'", 
            "'save'", "'stays'", "'then'", "'tplate'", "'until'", "'wend'", 
            "'while'", "'.'", "','", "'-'", "':'", "'*'", "'>'", "'-|'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", "Fi", 
            "If", "Is", "Macro", "Restore", "Rsect", "Save", "Stays", "Then", 
            "Tplate", "Until", "Wend", "While", "DOT", "COMMA", "MINUS", 
            "COLON", "ASTERISK", "ANGLE_BRACKET", "LINE_MARK_MARKER", "REGISTER", 
            "WORD", "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", "STRING", 
            "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64" ]

    ruleNames = [ "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", 
                  "Fi", "If", "Is", "Macro", "Restore", "Rsect", "Save", 
                  "Stays", "Then", "Tplate", "Until", "Wend", "While", "DOT", 
                  "COMMA", "MINUS", "COLON", "ASTERISK", "ANGLE_BRACKET", 
                  "LINE_MARK_MARKER", "REGISTER", "WORD", "DECIMAL_NUMBER", 
                  "BINARY_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", 
                  "COMMENT", "WS", "BASE64" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


